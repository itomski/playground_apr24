package de.lubowiecki;

public class DatentypenTest {

    private static int zahl; // Klassenvariable - gehört der Klasse (dem Bauplan)
    private int andereZahl; // Instanzvariable - gehört dem Objekt (jedes Objekt hat eine eigene)

    private static short ganzAndereZahl1; // bekommt den Standardwert
    private static short ganzAndereZahl2 = 10; // bekommt keinen Standardwert

    public static void main(String[] args) {

        // byte < short < int < long < float < double
        //         char <
        // boolean

        double d = 10; // int wird in eine double variable reingepackt
        //int i = 10.5; // double wird in eine int variable reingepackt: ERROR

        // 10 und 15 sind int-Literale
        int sum = 10 + 15;

        // Math ist eine Klasse mit Mathematischen-Methoden und Konstanten
        System.out.println(Math.pow(2,5)); // 2 hoch 5
        System.out.println(Math.PI);

        // boolean
        boolean b1 = true; // Deklaration (Bekanntgabe der Variable) und Initialisierung (erste Wertzuweisung)
        b1 = false; // Neuzuweisung
        // b1 = TRUE; // Error: muss klein geschrieben werden

        // Standardwerte werden bei Instanz- und Klassenvariablen benutzt
        // Lokale Variablen bekommen keine Standardwerte
        // Lokale Variable: Variable, die innerhalb einer Methode deklariert wird

        boolean b2; // Deklaration ohne Initialisierung
        // System.out.println(b2); // Error: b2 hat keinen Wert.
        // Lokale Variablen können erst nach der Zuweisung benutzt werden

        // byte
        byte by1 = 10; // Lokale Variable
        by1 = -10;
        by1 = -125;
        // by1 = 128; // 128 ist zu groß

        // short
        short s = 250; // Lokale Variable

        System.out.println(ganzAndereZahl1);
        System.out.println(ganzAndereZahl2);

        // int
        // Standardtyp für Ganzzahlen
        int i = 1_000_000_000;
        i = -1_000_000_000;
        i = 10;

        // long
        long l1 = 100_000_000_000l; // für long muss L oder l ans Ende geschrieben werden
        l1 = 10_00_00_00_00_00l; // für long muss L oder l ans Ende geschrieben werden

        int zahl = 0b10001; // 17
        System.out.println(zahl);
        //zahl = 0b10021; // Error! 2 in Binär nicht vorhanden

        // oktal
        zahl = 012; // 10
        System.out.println(zahl);

        // hex
        zahl = 0xabc;
        System.out.println(zahl);

        // float
        float f = 10; // int in float
        // f = 10.0; // double in float, Error: double ist zu groß
        f = 10.0f;

        double erg1 = 5d / 3d / 7d * 100d;
        System.out.println(erg1);

        float erg2 = 5f / 3f / 7f * 100f;
        System.out.println(erg2);

        char ch = 'C';
        System.out.println(ch);
        int i2 = ch; // char kann direkt in int umgewandelt werden
        System.out.println(i2);

        i2++; // Zahl wird um 1 erhöht
        System.out.println((char) i2); // cast von int auf char

        // Casts erzwingen eine Konvertierung von größeren zu kleiner Typen
        // Bei einem Cast können Informationen verloren gehen

        System.out.println();

        int i3 = 1000;
        byte by2 = (byte) i3; // ggfl. Überlauf oder Unterlauf
        System.out.println(by2);
    }
}
